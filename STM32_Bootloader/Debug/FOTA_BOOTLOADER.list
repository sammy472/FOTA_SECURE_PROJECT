
FOTA_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020d4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080021e0  080021e0  000031e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022b4  080022b4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080022b4  080022b4  000032b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022bc  080022bc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022bc  080022bc  000032bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022c0  080022c0  000032c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080022c4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000010  080022d0  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080022d0  000040a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ace  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204f  00000000  00000000  0000cb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0000eb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000635  00000000  00000000  0000f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177fb  00000000  00000000  0000f9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0fa  00000000  00000000  000271e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fd8  00000000  00000000  000332da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b52b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ebc  00000000  00000000  000b52f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b71b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080021c8 	.word	0x080021c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080021c8 	.word	0x080021c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Jump_To_Application>:
#include "app_jump.h"
#include "stm32f1xx_hal.h"

typedef void (*pFunction)(void);

void Jump_To_Application(uint32_t app_addr){
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    uint32_t jump_address = *(__IO uint32_t*)(app_addr + 4);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	3304      	adds	r3, #4
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	617b      	str	r3, [r7, #20]
    pFunction JumpToApplication = (pFunction)jump_address;
 800016c:	697b      	ldr	r3, [r7, #20]
 800016e:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000170:	b672      	cpsid	i
}
 8000172:	bf00      	nop

    __disable_irq();
    HAL_DeInit();
 8000174:	f000 fb96 	bl	80008a4 <HAL_DeInit>
    __set_MSP(*(__IO uint32_t*)app_addr);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	f383 8808 	msr	MSP, r3
}
 8000184:	bf00      	nop
    JumpToApplication();
 8000186:	693b      	ldr	r3, [r7, #16]
 8000188:	4798      	blx	r3
 800018a:	bf00      	nop
 800018c:	3718      	adds	r7, #24
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}

08000192 <Calculate_CRC>:
/************************************
 * crc_if.c
 ************************************/
#include "crc_if.h"

uint32_t Calculate_CRC(uint8_t *data, uint32_t len, CRC_HandleTypeDef* hcrc){
 8000192:	b580      	push	{r7, lr}
 8000194:	b084      	sub	sp, #16
 8000196:	af00      	add	r7, sp, #0
 8000198:	60f8      	str	r0, [r7, #12]
 800019a:	60b9      	str	r1, [r7, #8]
 800019c:	607a      	str	r2, [r7, #4]

    return HAL_CRC_Calculate(hcrc, (uint32_t*)data, len / 4);
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	089b      	lsrs	r3, r3, #2
 80001a2:	461a      	mov	r2, r3
 80001a4:	68f9      	ldr	r1, [r7, #12]
 80001a6:	6878      	ldr	r0, [r7, #4]
 80001a8:	f000 fd09 	bl	8000bbe <HAL_CRC_Calculate>
 80001ac:	4603      	mov	r3, r0
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	3710      	adds	r7, #16
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}

080001b6 <CRC_Check_Passed>:

bool CRC_Check_Passed(uint8_t *data, uint32_t len, UART_HandleTypeDef* huart1, CRC_HandleTypeDef* hcrc){
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b086      	sub	sp, #24
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	60f8      	str	r0, [r7, #12]
 80001be:	60b9      	str	r1, [r7, #8]
 80001c0:	607a      	str	r2, [r7, #4]
 80001c2:	603b      	str	r3, [r7, #0]
    uint32_t received_crc;
    HAL_UART_Receive(huart1, (uint8_t*)&received_crc, sizeof(uint32_t), HAL_MAX_DELAY);
 80001c4:	f107 0110 	add.w	r1, r7, #16
 80001c8:	f04f 33ff 	mov.w	r3, #4294967295
 80001cc:	2204      	movs	r2, #4
 80001ce:	6878      	ldr	r0, [r7, #4]
 80001d0:	f001 fddf 	bl	8001d92 <HAL_UART_Receive>
    uint32_t calc_crc = Calculate_CRC(data, len, hcrc);
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	68b9      	ldr	r1, [r7, #8]
 80001d8:	68f8      	ldr	r0, [r7, #12]
 80001da:	f7ff ffda 	bl	8000192 <Calculate_CRC>
 80001de:	6178      	str	r0, [r7, #20]
    return (calc_crc == received_crc);
 80001e0:	693b      	ldr	r3, [r7, #16]
 80001e2:	697a      	ldr	r2, [r7, #20]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	bf0c      	ite	eq
 80001e8:	2301      	moveq	r3, #1
 80001ea:	2300      	movne	r3, #0
 80001ec:	b2db      	uxtb	r3, r3
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	3718      	adds	r7, #24
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}

080001f6 <Flash_Erase>:
#include "flash_if.h"
#include "stm32f1xx_hal.h"
#include <string.h>

void Flash_Erase(uint32_t start_address, uint32_t length)
{
 80001f6:	b580      	push	{r7, lr}
 80001f8:	b088      	sub	sp, #32
 80001fa:	af00      	add	r7, sp, #0
 80001fc:	6078      	str	r0, [r7, #4]
 80001fe:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 8000200:	f000 fd80 	bl	8000d04 <HAL_FLASH_Unlock>
    uint32_t page_error = 0;
 8000204:	2300      	movs	r3, #0
 8000206:	61fb      	str	r3, [r7, #28]
    FLASH_EraseInitTypeDef erase = {
 8000208:	f107 030c 	add.w	r3, r7, #12
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	617b      	str	r3, [r7, #20]
        .TypeErase = FLASH_TYPEERASE_PAGES,
        .PageAddress = start_address,
        .NbPages = (length / FOTA_FLASH_PAGE_SIZE) + 1
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	0a9b      	lsrs	r3, r3, #10
 800021e:	3301      	adds	r3, #1
    FLASH_EraseInitTypeDef erase = {
 8000220:	61bb      	str	r3, [r7, #24]
    };
    HAL_FLASHEx_Erase(&erase, &page_error);
 8000222:	f107 021c 	add.w	r2, r7, #28
 8000226:	f107 030c 	add.w	r3, r7, #12
 800022a:	4611      	mov	r1, r2
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fe51 	bl	8000ed4 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 8000232:	f000 fd8d 	bl	8000d50 <HAL_FLASH_Lock>
}
 8000236:	bf00      	nop
 8000238:	3720      	adds	r7, #32
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}

0800023e <Flash_Write>:

void Flash_Write(uint32_t address, uint8_t *data, uint32_t length)
{
 800023e:	b5b0      	push	{r4, r5, r7, lr}
 8000240:	b086      	sub	sp, #24
 8000242:	af00      	add	r7, sp, #0
 8000244:	60f8      	str	r0, [r7, #12]
 8000246:	60b9      	str	r1, [r7, #8]
 8000248:	607a      	str	r2, [r7, #4]
    HAL_FLASH_Unlock();
 800024a:	f000 fd5b 	bl	8000d04 <HAL_FLASH_Unlock>
    for (uint32_t i = 0; i < length; i += 2)
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]
 8000252:	e01d      	b.n	8000290 <Flash_Write+0x52>
    {
        uint16_t half_word = data[i] | (data[i + 1] << 8);
 8000254:	68ba      	ldr	r2, [r7, #8]
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	4413      	add	r3, r2
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	b21a      	sxth	r2, r3
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	3301      	adds	r3, #1
 8000262:	68b9      	ldr	r1, [r7, #8]
 8000264:	440b      	add	r3, r1
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	021b      	lsls	r3, r3, #8
 800026a:	b21b      	sxth	r3, r3
 800026c:	4313      	orrs	r3, r2
 800026e:	b21b      	sxth	r3, r3
 8000270:	827b      	strh	r3, [r7, #18]
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + i, half_word);
 8000272:	68fa      	ldr	r2, [r7, #12]
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	18d1      	adds	r1, r2, r3
 8000278:	8a7b      	ldrh	r3, [r7, #18]
 800027a:	2200      	movs	r2, #0
 800027c:	461c      	mov	r4, r3
 800027e:	4615      	mov	r5, r2
 8000280:	4622      	mov	r2, r4
 8000282:	462b      	mov	r3, r5
 8000284:	2001      	movs	r0, #1
 8000286:	f000 fccd 	bl	8000c24 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < length; i += 2)
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	3302      	adds	r3, #2
 800028e:	617b      	str	r3, [r7, #20]
 8000290:	697a      	ldr	r2, [r7, #20]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	429a      	cmp	r2, r3
 8000296:	d3dd      	bcc.n	8000254 <Flash_Write+0x16>
    }
    HAL_FLASH_Lock();
 8000298:	f000 fd5a 	bl	8000d50 <HAL_FLASH_Lock>
}
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bdb0      	pop	{r4, r5, r7, pc}

080002a4 <Backup_Current_Firmware>:

void Backup_Current_Firmware(uint32_t src, uint32_t dest)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80002b0:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80002b4:	6018      	str	r0, [r3, #0]
 80002b6:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80002ba:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80002be:	6019      	str	r1, [r3, #0]
    uint32_t size = MAX_FW_SIZE;
 80002c0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80002c4:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
    uint8_t buffer[FOTA_FLASH_PAGE_SIZE];
    for (uint32_t offset = 0; offset < size; offset += FOTA_FLASH_PAGE_SIZE)
 80002c8:	2300      	movs	r3, #0
 80002ca:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 80002ce:	e035      	b.n	800033c <Backup_Current_Firmware+0x98>
    {
        memcpy(buffer, (uint8_t *)(src + offset), FOTA_FLASH_PAGE_SIZE);
 80002d0:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80002d4:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 80002de:	4413      	add	r3, r2
 80002e0:	461a      	mov	r2, r3
 80002e2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80002e6:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80002ea:	4618      	mov	r0, r3
 80002ec:	4611      	mov	r1, r2
 80002ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002f2:	461a      	mov	r2, r3
 80002f4:	f001 ff5a 	bl	80021ac <memcpy>
        Flash_Erase(dest + offset, FLASH_PAGE_SIZE);
 80002f8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80002fc:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000306:	4413      	add	r3, r2
 8000308:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff72 	bl	80001f6 <Flash_Erase>
        Flash_Write(dest + offset, buffer, FOTA_FLASH_PAGE_SIZE);
 8000312:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000316:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000320:	4413      	add	r3, r2
 8000322:	f107 0108 	add.w	r1, r7, #8
 8000326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff87 	bl	800023e <Flash_Write>
    for (uint32_t offset = 0; offset < size; offset += FOTA_FLASH_PAGE_SIZE)
 8000330:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000334:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000338:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 800033c:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8000340:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000344:	429a      	cmp	r2, r3
 8000346:	d3c3      	bcc.n	80002d0 <Backup_Current_Firmware+0x2c>
    }
}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <FOTA_Error_Handler>:
 ************************************/
#include "fota_error_handler.h"
#include "main.h"

void FOTA_Error_Handler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
    while (1)
    {
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000358:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800035c:	4804      	ldr	r0, [pc, #16]	@ (8000370 <FOTA_Error_Handler+0x1c>)
 800035e:	f001 f814 	bl	800138a <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 8000362:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000366:	f000 fb07 	bl	8000978 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800036a:	bf00      	nop
 800036c:	e7f4      	b.n	8000358 <FOTA_Error_Handler+0x4>
 800036e:	bf00      	nop
 8000370:	40011000 	.word	0x40011000

08000374 <Is_OTA_Triggered>:
/************************************
 * gpio_if.c
 ************************************/
#include "gpio_if.h"

bool Is_OTA_Triggered(GPIO_TypeDef *port, uint16_t pin){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	807b      	strh	r3, [r7, #2]

    return (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_SET);
 8000380:	887b      	ldrh	r3, [r7, #2]
 8000382:	4619      	mov	r1, r3
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	f000 ffd1 	bl	800132c <HAL_GPIO_ReadPin>
 800038a:	4603      	mov	r3, r0
 800038c:	2b01      	cmp	r3, #1
 800038e:	bf0c      	ite	eq
 8000390:	2301      	moveq	r3, #1
 8000392:	2300      	movne	r3, #0
 8000394:	b2db      	uxtb	r3, r3
}
 8000396:	4618      	mov	r0, r3
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	f5ad 4d40 	sub.w	sp, sp, #49152	@ 0xc000
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003aa:	f000 fa65 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ae:	f000 f871 	bl	8000494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b2:	f000 f8e9 	bl	8000588 <MX_GPIO_Init>
  MX_CRC_Init();
 80003b6:	f000 f8a9 	bl	800050c <MX_CRC_Init>
  MX_USART1_UART_Init();
 80003ba:	f000 f8bb 	bl	8000534 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    if (Is_OTA_Triggered(OTA_TRIGGER_PORT, OTA_TRIGGER_PIN))
 80003be:	2101      	movs	r1, #1
 80003c0:	482a      	ldr	r0, [pc, #168]	@ (800046c <main+0xcc>)
 80003c2:	f7ff ffd7 	bl	8000374 <Is_OTA_Triggered>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d045      	beq.n	8000458 <main+0xb8>
    {
        UART_Send_String("\nOTA Update Requested\n", &huart1);
 80003cc:	4928      	ldr	r1, [pc, #160]	@ (8000470 <main+0xd0>)
 80003ce:	4829      	ldr	r0, [pc, #164]	@ (8000474 <main+0xd4>)
 80003d0:	f000 f9fc 	bl	80007cc <UART_Send_String>

        uint8_t firmware[MAX_FW_SIZE];
        uint32_t fw_len = UART_Receive_Firmware(firmware,&huart1);
 80003d4:	f107 0308 	add.w	r3, r7, #8
 80003d8:	3b04      	subs	r3, #4
 80003da:	4925      	ldr	r1, [pc, #148]	@ (8000470 <main+0xd0>)
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fa09 	bl	80007f4 <UART_Receive_Firmware>
 80003e2:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 80003e6:	f103 0304 	add.w	r3, r3, #4
 80003ea:	6018      	str	r0, [r3, #0]

        if (CRC_Check_Passed(firmware, fw_len,&huart1, &hcrc))
 80003ec:	f107 0008 	add.w	r0, r7, #8
 80003f0:	3804      	subs	r0, #4
 80003f2:	4b21      	ldr	r3, [pc, #132]	@ (8000478 <main+0xd8>)
 80003f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000470 <main+0xd0>)
 80003f6:	f507 4140 	add.w	r1, r7, #49152	@ 0xc000
 80003fa:	f101 0104 	add.w	r1, r1, #4
 80003fe:	6809      	ldr	r1, [r1, #0]
 8000400:	f7ff fed9 	bl	80001b6 <CRC_Check_Passed>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d020      	beq.n	800044c <main+0xac>
        {
        	UART_Send_String("CRC Passed. Flashing new firmware...\n", &huart1);
 800040a:	4919      	ldr	r1, [pc, #100]	@ (8000470 <main+0xd0>)
 800040c:	481b      	ldr	r0, [pc, #108]	@ (800047c <main+0xdc>)
 800040e:	f000 f9dd 	bl	80007cc <UART_Send_String>

            Backup_Current_Firmware(APP_ADDRESS, BACKUP_ADDRESS);
 8000412:	491b      	ldr	r1, [pc, #108]	@ (8000480 <main+0xe0>)
 8000414:	481b      	ldr	r0, [pc, #108]	@ (8000484 <main+0xe4>)
 8000416:	f7ff ff45 	bl	80002a4 <Backup_Current_Firmware>
            Flash_Erase(APP_ADDRESS, fw_len);
 800041a:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 800041e:	f103 0304 	add.w	r3, r3, #4
 8000422:	6819      	ldr	r1, [r3, #0]
 8000424:	4817      	ldr	r0, [pc, #92]	@ (8000484 <main+0xe4>)
 8000426:	f7ff fee6 	bl	80001f6 <Flash_Erase>
            Flash_Write(APP_ADDRESS, firmware, fw_len);
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	3b04      	subs	r3, #4
 8000430:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8000434:	f102 0204 	add.w	r2, r2, #4
 8000438:	6812      	ldr	r2, [r2, #0]
 800043a:	4619      	mov	r1, r3
 800043c:	4811      	ldr	r0, [pc, #68]	@ (8000484 <main+0xe4>)
 800043e:	f7ff fefe 	bl	800023e <Flash_Write>

            UART_Send_String("Firmware updated successfully.\n", &huart1);
 8000442:	490b      	ldr	r1, [pc, #44]	@ (8000470 <main+0xd0>)
 8000444:	4810      	ldr	r0, [pc, #64]	@ (8000488 <main+0xe8>)
 8000446:	f000 f9c1 	bl	80007cc <UART_Send_String>
 800044a:	e005      	b.n	8000458 <main+0xb8>
        }
        else
        {
        	UART_Send_String("CRC Failed. Launching error handler.\n", &huart1);
 800044c:	4908      	ldr	r1, [pc, #32]	@ (8000470 <main+0xd0>)
 800044e:	480f      	ldr	r0, [pc, #60]	@ (800048c <main+0xec>)
 8000450:	f000 f9bc 	bl	80007cc <UART_Send_String>
        	FOTA_Error_Handler();
 8000454:	f7ff ff7e 	bl	8000354 <FOTA_Error_Handler>
        }
    }

    UART_Send_String("Booting main application...\n", &huart1);
 8000458:	4905      	ldr	r1, [pc, #20]	@ (8000470 <main+0xd0>)
 800045a:	480d      	ldr	r0, [pc, #52]	@ (8000490 <main+0xf0>)
 800045c:	f000 f9b6 	bl	80007cc <UART_Send_String>
    Jump_To_Application(APP_ADDRESS);
 8000460:	4808      	ldr	r0, [pc, #32]	@ (8000484 <main+0xe4>)
 8000462:	f7ff fe7b 	bl	800015c <Jump_To_Application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000466:	bf00      	nop
 8000468:	e7fd      	b.n	8000466 <main+0xc6>
 800046a:	bf00      	nop
 800046c:	40010800 	.word	0x40010800
 8000470:	20000034 	.word	0x20000034
 8000474:	080021e0 	.word	0x080021e0
 8000478:	2000002c 	.word	0x2000002c
 800047c:	080021f8 	.word	0x080021f8
 8000480:	0800c000 	.word	0x0800c000
 8000484:	08004000 	.word	0x08004000
 8000488:	08002220 	.word	0x08002220
 800048c:	08002240 	.word	0x08002240
 8000490:	08002268 	.word	0x08002268

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b090      	sub	sp, #64	@ 0x40
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 0318 	add.w	r3, r7, #24
 800049e:	2228      	movs	r2, #40	@ 0x28
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f001 fe56 	bl	8002154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b6:	2302      	movs	r3, #2
 80004b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ba:	2301      	movs	r3, #1
 80004bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004be:	2310      	movs	r3, #16
 80004c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c2:	2300      	movs	r3, #0
 80004c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c6:	f107 0318 	add.w	r3, r7, #24
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 ff76 	bl	80013bc <HAL_RCC_OscConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004d6:	f000 f8a5 	bl	8000624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004da:	230f      	movs	r3, #15
 80004dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 f9e4 	bl	80018c0 <HAL_RCC_ClockConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004fe:	f000 f891 	bl	8000624 <Error_Handler>
  }
}
 8000502:	bf00      	nop
 8000504:	3740      	adds	r7, #64	@ 0x40
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000510:	4b06      	ldr	r3, [pc, #24]	@ (800052c <MX_CRC_Init+0x20>)
 8000512:	4a07      	ldr	r2, [pc, #28]	@ (8000530 <MX_CRC_Init+0x24>)
 8000514:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000516:	4805      	ldr	r0, [pc, #20]	@ (800052c <MX_CRC_Init+0x20>)
 8000518:	f000 fb35 	bl	8000b86 <HAL_CRC_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000522:	f000 f87f 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	2000002c 	.word	0x2000002c
 8000530:	40023000 	.word	0x40023000

08000534 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 800053a:	4a12      	ldr	r2, [pc, #72]	@ (8000584 <MX_USART1_UART_Init+0x50>)
 800053c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800053e:	4b10      	ldr	r3, [pc, #64]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 8000540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000544:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000546:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000552:	4b0b      	ldr	r3, [pc, #44]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 800055a:	220c      	movs	r2, #12
 800055c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055e:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 800056c:	f001 fb36 	bl	8001bdc <HAL_UART_Init>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000576:	f000 f855 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000034 	.word	0x20000034
 8000584:	40013800 	.word	0x40013800

08000588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059c:	4b1e      	ldr	r3, [pc, #120]	@ (8000618 <MX_GPIO_Init+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000618 <MX_GPIO_Init+0x90>)
 80005a2:	f043 0310 	orr.w	r3, r3, #16
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <MX_GPIO_Init+0x90>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0310 	and.w	r3, r3, #16
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <MX_GPIO_Init+0x90>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <MX_GPIO_Init+0x90>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <MX_GPIO_Init+0x90>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d2:	4812      	ldr	r0, [pc, #72]	@ (800061c <MX_GPIO_Init+0x94>)
 80005d4:	f000 fec1 	bl	800135a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2302      	movs	r3, #2
 80005e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	4619      	mov	r1, r3
 80005f0:	480a      	ldr	r0, [pc, #40]	@ (800061c <MX_GPIO_Init+0x94>)
 80005f2:	f000 fd17 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005f6:	2301      	movs	r3, #1
 80005f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	4619      	mov	r1, r3
 8000608:	4805      	ldr	r0, [pc, #20]	@ (8000620 <MX_GPIO_Init+0x98>)
 800060a:	f000 fd0b 	bl	8001024 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800060e:	bf00      	nop
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000
 800061c:	40011000 	.word	0x40011000
 8000620:	40010800 	.word	0x40010800

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <Error_Handler+0x8>

08000630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000636:	4b15      	ldr	r3, [pc, #84]	@ (800068c <HAL_MspInit+0x5c>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a14      	ldr	r2, [pc, #80]	@ (800068c <HAL_MspInit+0x5c>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6193      	str	r3, [r2, #24]
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <HAL_MspInit+0x5c>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <HAL_MspInit+0x5c>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a0e      	ldr	r2, [pc, #56]	@ (800068c <HAL_MspInit+0x5c>)
 8000654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <HAL_MspInit+0x5c>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000666:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <HAL_MspInit+0x60>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <HAL_MspInit+0x60>)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	40021000 	.word	0x40021000
 8000690:	40010000 	.word	0x40010000

08000694 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a09      	ldr	r2, [pc, #36]	@ (80006c8 <HAL_CRC_MspInit+0x34>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d10b      	bne.n	80006be <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <HAL_CRC_MspInit+0x38>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a08      	ldr	r2, [pc, #32]	@ (80006cc <HAL_CRC_MspInit+0x38>)
 80006ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006b0:	6153      	str	r3, [r2, #20]
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <HAL_CRC_MspInit+0x38>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	40023000 	.word	0x40023000
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a1c      	ldr	r2, [pc, #112]	@ (800075c <HAL_UART_MspInit+0x8c>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d131      	bne.n	8000754 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <HAL_UART_MspInit+0x90>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000760 <HAL_UART_MspInit+0x90>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <HAL_UART_MspInit+0x90>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <HAL_UART_MspInit+0x90>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a14      	ldr	r2, [pc, #80]	@ (8000760 <HAL_UART_MspInit+0x90>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <HAL_UART_MspInit+0x90>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0304 	and.w	r3, r3, #4
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000724:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	4619      	mov	r1, r3
 8000734:	480b      	ldr	r0, [pc, #44]	@ (8000764 <HAL_UART_MspInit+0x94>)
 8000736:	f000 fc75 	bl	8001024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800073a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800073e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	4619      	mov	r1, r3
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <HAL_UART_MspInit+0x94>)
 8000750:	f000 fc68 	bl	8001024 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40013800 	.word	0x40013800
 8000760:	40021000 	.word	0x40021000
 8000764:	40010800 	.word	0x40010800

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <NMI_Handler+0x4>

08000770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <MemManage_Handler+0x4>

08000780 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <UsageFault_Handler+0x4>

08000790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f8c2 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <UART_Send_String>:
 ************************************/
#include "uart_if.h"


void UART_Send_String(const char *str, UART_HandleTypeDef* huart1)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fcb8 	bl	800014c <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	6879      	ldr	r1, [r7, #4]
 80007e6:	6838      	ldr	r0, [r7, #0]
 80007e8:	f001 fa48 	bl	8001c7c <HAL_UART_Transmit>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <UART_Receive_Firmware>:

uint32_t UART_Receive_Firmware(uint8_t *buffer, UART_HandleTypeDef* huart1)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
    uint32_t total = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive(huart1, (uint8_t*)&total, sizeof(uint32_t), UART_TIMEOUT);
 8000802:	f107 010c 	add.w	r1, r7, #12
 8000806:	f241 3388 	movw	r3, #5000	@ 0x1388
 800080a:	2204      	movs	r2, #4
 800080c:	6838      	ldr	r0, [r7, #0]
 800080e:	f001 fac0 	bl	8001d92 <HAL_UART_Receive>
    HAL_UART_Receive(huart1, buffer, total, UART_TIMEOUT);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	b29a      	uxth	r2, r3
 8000816:	f241 3388 	movw	r3, #5000	@ 0x1388
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	6838      	ldr	r0, [r7, #0]
 800081e:	f001 fab8 	bl	8001d92 <HAL_UART_Receive>
    return total;
 8000822:	68fb      	ldr	r3, [r7, #12]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800082c:	f7ff ffc8 	bl	80007c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000830:	480b      	ldr	r0, [pc, #44]	@ (8000860 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000832:	490c      	ldr	r1, [pc, #48]	@ (8000864 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000834:	4a0c      	ldr	r2, [pc, #48]	@ (8000868 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a09      	ldr	r2, [pc, #36]	@ (800086c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000848:	4c09      	ldr	r4, [pc, #36]	@ (8000870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000856:	f001 fc85 	bl	8002164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085a:	f7ff fda1 	bl	80003a0 <main>
  bx lr
 800085e:	4770      	bx	lr
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000868:	080022c4 	.word	0x080022c4
  ldr r2, =_sbss
 800086c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000870:	200000a0 	.word	0x200000a0

08000874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_2_IRQHandler>
	...

08000878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <HAL_Init+0x28>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	@ (80008a0 <HAL_Init+0x28>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f949 	bl	8000b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	200f      	movs	r0, #15
 8000890:	f000 f826 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff fecc 	bl	8000630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_DeInit+0x2c>)
 80008aa:	f04f 32ff 	mov.w	r2, #4294967295
 80008ae:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 80008b0:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <HAL_DeInit+0x2c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_DeInit+0x2c>)
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295
 80008bc:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 80008be:	4b04      	ldr	r3, [pc, #16]	@ (80008d0 <HAL_DeInit+0x2c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80008c4:	f000 f806 	bl	80008d4 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f935 	bl	8000b6e <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 f90b 	bl	8000b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	@ (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000
 8000938:	20000008 	.word	0x20000008
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b05      	ldr	r3, [pc, #20]	@ (800095c <HAL_IncTick+0x1c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_IncTick+0x20>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a03      	ldr	r2, [pc, #12]	@ (8000960 <HAL_IncTick+0x20>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	20000008 	.word	0x20000008
 8000960:	2000007c 	.word	0x2000007c

08000964 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b02      	ldr	r3, [pc, #8]	@ (8000974 <HAL_GetTick+0x10>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	2000007c 	.word	0x2000007c

08000978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000980:	f7ff fff0 	bl	8000964 <HAL_GetTick>
 8000984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000990:	d005      	beq.n	800099e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000992:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <HAL_Delay+0x44>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4413      	add	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800099e:	bf00      	nop
 80009a0:	f7ff ffe0 	bl	8000964 <HAL_GetTick>
 80009a4:	4602      	mov	r2, r0
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d8f7      	bhi.n	80009a0 <HAL_Delay+0x28>
  {
  }
}
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000008 	.word	0x20000008

080009c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f2:	4a04      	ldr	r2, [pc, #16]	@ (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	60d3      	str	r3, [r2, #12]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <__NVIC_GetPriorityGrouping+0x18>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	f003 0307 	and.w	r3, r3, #7
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	db0a      	blt.n	8000a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	490c      	ldr	r1, [pc, #48]	@ (8000a70 <__NVIC_SetPriority+0x4c>)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	0112      	lsls	r2, r2, #4
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	440b      	add	r3, r1
 8000a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a4c:	e00a      	b.n	8000a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4908      	ldr	r1, [pc, #32]	@ (8000a74 <__NVIC_SetPriority+0x50>)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	3b04      	subs	r3, #4
 8000a5c:	0112      	lsls	r2, r2, #4
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	440b      	add	r3, r1
 8000a62:	761a      	strb	r2, [r3, #24]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b089      	sub	sp, #36	@ 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	f1c3 0307 	rsb	r3, r3, #7
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	bf28      	it	cs
 8000a96:	2304      	movcs	r3, #4
 8000a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d902      	bls.n	8000aa8 <NVIC_EncodePriority+0x30>
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3b03      	subs	r3, #3
 8000aa6:	e000      	b.n	8000aaa <NVIC_EncodePriority+0x32>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aca:	43d9      	mvns	r1, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	4313      	orrs	r3, r2
         );
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3724      	adds	r7, #36	@ 0x24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aec:	d301      	bcc.n	8000af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00f      	b.n	8000b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <SysTick_Config+0x40>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afa:	210f      	movs	r1, #15
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f7ff ff90 	bl	8000a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <SysTick_Config+0x40>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <SysTick_Config+0x40>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff49 	bl	80009c0 <__NVIC_SetPriorityGrouping>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b48:	f7ff ff5e 	bl	8000a08 <__NVIC_GetPriorityGrouping>
 8000b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	6978      	ldr	r0, [r7, #20]
 8000b54:	f7ff ff90 	bl	8000a78 <NVIC_EncodePriority>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff5f 	bl	8000a24 <__NVIC_SetPriority>
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffb0 	bl	8000adc <SysTick_Config>
 8000b7c:	4603      	mov	r3, r0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e00e      	b.n	8000bb6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	795b      	ldrb	r3, [r3, #5]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d105      	bne.n	8000bae <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff fd73 	bl	8000694 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b087      	sub	sp, #28
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f042 0201 	orr.w	r2, r2, #1
 8000be2:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e00a      	b.n	8000c00 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	441a      	add	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6812      	ldr	r2, [r2, #0]
 8000bf8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d3f0      	bcc.n	8000bea <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2201      	movs	r2, #1
 8000c14:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000c16:	693b      	ldr	r3, [r7, #16]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	371c      	adds	r7, #28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
	...

08000c24 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c26:	b087      	sub	sp, #28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000cfc <HAL_FLASH_Program+0xd8>)
 8000c40:	7e1b      	ldrb	r3, [r3, #24]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d101      	bne.n	8000c4a <HAL_FLASH_Program+0x26>
 8000c46:	2302      	movs	r3, #2
 8000c48:	e054      	b.n	8000cf4 <HAL_FLASH_Program+0xd0>
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000cfc <HAL_FLASH_Program+0xd8>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c50:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000c54:	f000 f8a8 	bl	8000da8 <FLASH_WaitForLastOperation>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000c5c:	7dfb      	ldrb	r3, [r7, #23]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d144      	bne.n	8000cec <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d102      	bne.n	8000c6e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	757b      	strb	r3, [r7, #21]
 8000c6c:	e007      	b.n	8000c7e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d102      	bne.n	8000c7a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000c74:	2302      	movs	r3, #2
 8000c76:	757b      	strb	r3, [r7, #21]
 8000c78:	e001      	b.n	8000c7e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	75bb      	strb	r3, [r7, #22]
 8000c82:	e02d      	b.n	8000ce0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000c84:	7dbb      	ldrb	r3, [r7, #22]
 8000c86:	005a      	lsls	r2, r3, #1
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	eb02 0c03 	add.w	ip, r2, r3
 8000c8e:	7dbb      	ldrb	r3, [r7, #22]
 8000c90:	0119      	lsls	r1, r3, #4
 8000c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c96:	f1c1 0620 	rsb	r6, r1, #32
 8000c9a:	f1a1 0020 	sub.w	r0, r1, #32
 8000c9e:	fa22 f401 	lsr.w	r4, r2, r1
 8000ca2:	fa03 f606 	lsl.w	r6, r3, r6
 8000ca6:	4334      	orrs	r4, r6
 8000ca8:	fa23 f000 	lsr.w	r0, r3, r0
 8000cac:	4304      	orrs	r4, r0
 8000cae:	fa23 f501 	lsr.w	r5, r3, r1
 8000cb2:	b2a3      	uxth	r3, r4
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4660      	mov	r0, ip
 8000cb8:	f000 f85a 	bl	8000d70 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cbc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000cc0:	f000 f872 	bl	8000da8 <FLASH_WaitForLastOperation>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <HAL_FLASH_Program+0xdc>)
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8000d00 <HAL_FLASH_Program+0xdc>)
 8000cce:	f023 0301 	bic.w	r3, r3, #1
 8000cd2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d107      	bne.n	8000cea <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000cda:	7dbb      	ldrb	r3, [r7, #22]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	75bb      	strb	r3, [r7, #22]
 8000ce0:	7dba      	ldrb	r2, [r7, #22]
 8000ce2:	7d7b      	ldrb	r3, [r7, #21]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d3cd      	bcc.n	8000c84 <HAL_FLASH_Program+0x60>
 8000ce8:	e000      	b.n	8000cec <HAL_FLASH_Program+0xc8>
      {
        break;
 8000cea:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <HAL_FLASH_Program+0xd8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	761a      	strb	r2, [r3, #24]

  return status;
 8000cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	371c      	adds	r7, #28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfc:	20000080 	.word	0x20000080
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <HAL_FLASH_Unlock+0x40>)
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00d      	beq.n	8000d36 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_FLASH_Unlock+0x40>)
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_FLASH_Unlock+0x44>)
 8000d1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_FLASH_Unlock+0x40>)
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <HAL_FLASH_Unlock+0x48>)
 8000d24:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d26:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <HAL_FLASH_Unlock+0x40>)
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40022000 	.word	0x40022000
 8000d48:	45670123 	.word	0x45670123
 8000d4c:	cdef89ab 	.word	0xcdef89ab

08000d50 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_FLASH_Lock+0x1c>)
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <HAL_FLASH_Lock+0x1c>)
 8000d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d5e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40022000 	.word	0x40022000

08000d70 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <FLASH_Program_HalfWord+0x30>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d82:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <FLASH_Program_HalfWord+0x34>)
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	4a07      	ldr	r2, [pc, #28]	@ (8000da4 <FLASH_Program_HalfWord+0x34>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	887a      	ldrh	r2, [r7, #2]
 8000d92:	801a      	strh	r2, [r3, #0]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000080 	.word	0x20000080
 8000da4:	40022000 	.word	0x40022000

08000da8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff fdd8 	bl	8000964 <HAL_GetTick>
 8000db4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000db6:	e010      	b.n	8000dda <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbe:	d00c      	beq.n	8000dda <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d007      	beq.n	8000dd6 <FLASH_WaitForLastOperation+0x2e>
 8000dc6:	f7ff fdcd 	bl	8000964 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d201      	bcs.n	8000dda <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e025      	b.n	8000e26 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <FLASH_WaitForLastOperation+0x88>)
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1e8      	bne.n	8000db8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000de6:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <FLASH_WaitForLastOperation+0x88>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f003 0320 	and.w	r3, r3, #32
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000df2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <FLASH_WaitForLastOperation+0x88>)
 8000df4:	2220      	movs	r2, #32
 8000df6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000df8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <FLASH_WaitForLastOperation+0x88>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f003 0310 	and.w	r3, r3, #16
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10b      	bne.n	8000e1c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <FLASH_WaitForLastOperation+0x88>)
 8000e06:	69db      	ldr	r3, [r3, #28]
 8000e08:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d105      	bne.n	8000e1c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e10:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <FLASH_WaitForLastOperation+0x88>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e1c:	f000 f80a 	bl	8000e34 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40022000 	.word	0x40022000

08000e34 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e3e:	4b23      	ldr	r3, [pc, #140]	@ (8000ecc <FLASH_SetErrorCode+0x98>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d009      	beq.n	8000e5e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <FLASH_SetErrorCode+0x9c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed0 <FLASH_SetErrorCode+0x9c>)
 8000e54:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f043 0310 	orr.w	r3, r3, #16
 8000e5c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <FLASH_SetErrorCode+0x98>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d009      	beq.n	8000e7e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <FLASH_SetErrorCode+0x9c>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	4a17      	ldr	r2, [pc, #92]	@ (8000ed0 <FLASH_SetErrorCode+0x9c>)
 8000e74:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000e7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <FLASH_SetErrorCode+0x98>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00b      	beq.n	8000ea2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <FLASH_SetErrorCode+0x9c>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed0 <FLASH_SetErrorCode+0x9c>)
 8000e94:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <FLASH_SetErrorCode+0x98>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8000ecc <FLASH_SetErrorCode+0x98>)
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f240 1201 	movw	r2, #257	@ 0x101
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d106      	bne.n	8000eba <FLASH_SetErrorCode+0x86>
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <FLASH_SetErrorCode+0x98>)
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <FLASH_SetErrorCode+0x98>)
 8000eb2:	f023 0301 	bic.w	r3, r3, #1
 8000eb6:	61d3      	str	r3, [r2, #28]
}  
 8000eb8:	e002      	b.n	8000ec0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000eba:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <FLASH_SetErrorCode+0x98>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	60d3      	str	r3, [r2, #12]
}  
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40022000 	.word	0x40022000
 8000ed0:	20000080 	.word	0x20000080

08000ed4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa4 <HAL_FLASHEx_Erase+0xd0>)
 8000ee8:	7e1b      	ldrb	r3, [r3, #24]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d101      	bne.n	8000ef2 <HAL_FLASHEx_Erase+0x1e>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e053      	b.n	8000f9a <HAL_FLASHEx_Erase+0xc6>
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <HAL_FLASHEx_Erase+0xd0>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d116      	bne.n	8000f2e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f00:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f04:	f7ff ff50 	bl	8000da8 <FLASH_WaitForLastOperation>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d141      	bne.n	8000f92 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f000 f84c 	bl	8000fac <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f14:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f18:	f7ff ff46 	bl	8000da8 <FLASH_WaitForLastOperation>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000f20:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <HAL_FLASHEx_Erase+0xd4>)
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	4a20      	ldr	r2, [pc, #128]	@ (8000fa8 <HAL_FLASHEx_Erase+0xd4>)
 8000f26:	f023 0304 	bic.w	r3, r3, #4
 8000f2a:	6113      	str	r3, [r2, #16]
 8000f2c:	e031      	b.n	8000f92 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f2e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f32:	f7ff ff39 	bl	8000da8 <FLASH_WaitForLastOperation>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d12a      	bne.n	8000f92 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f42:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	e019      	b.n	8000f80 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000f4c:	68b8      	ldr	r0, [r7, #8]
 8000f4e:	f000 f849 	bl	8000fe4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f52:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f56:	f7ff ff27 	bl	8000da8 <FLASH_WaitForLastOperation>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f5e:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_FLASHEx_Erase+0xd4>)
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	4a11      	ldr	r2, [pc, #68]	@ (8000fa8 <HAL_FLASHEx_Erase+0xd4>)
 8000f64:	f023 0302 	bic.w	r3, r3, #2
 8000f68:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	601a      	str	r2, [r3, #0]
            break;
 8000f76:	e00c      	b.n	8000f92 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000f7e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	029a      	lsls	r2, r3, #10
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d3dc      	bcc.n	8000f4c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f92:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <HAL_FLASHEx_Erase+0xd0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	761a      	strb	r2, [r3, #24]

  return status;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000080 	.word	0x20000080
 8000fa8:	40022000 	.word	0x40022000

08000fac <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <FLASH_MassErase+0x30>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <FLASH_MassErase+0x34>)
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	4a08      	ldr	r2, [pc, #32]	@ (8000fe0 <FLASH_MassErase+0x34>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <FLASH_MassErase+0x34>)
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <FLASH_MassErase+0x34>)
 8000fcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fd0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	20000080 	.word	0x20000080
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <FLASH_PageErase+0x38>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <FLASH_PageErase+0x3c>)
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <FLASH_PageErase+0x3c>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000ffe:	4a08      	ldr	r2, [pc, #32]	@ (8001020 <FLASH_PageErase+0x3c>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <FLASH_PageErase+0x3c>)
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <FLASH_PageErase+0x3c>)
 800100a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800100e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000080 	.word	0x20000080
 8001020:	40022000 	.word	0x40022000

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b08b      	sub	sp, #44	@ 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e169      	b.n	800130c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001038:	2201      	movs	r2, #1
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	429a      	cmp	r2, r3
 8001052:	f040 8158 	bne.w	8001306 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	4a9a      	ldr	r2, [pc, #616]	@ (80012c4 <HAL_GPIO_Init+0x2a0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d05e      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 8001060:	4a98      	ldr	r2, [pc, #608]	@ (80012c4 <HAL_GPIO_Init+0x2a0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d875      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 8001066:	4a98      	ldr	r2, [pc, #608]	@ (80012c8 <HAL_GPIO_Init+0x2a4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d058      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 800106c:	4a96      	ldr	r2, [pc, #600]	@ (80012c8 <HAL_GPIO_Init+0x2a4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d86f      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 8001072:	4a96      	ldr	r2, [pc, #600]	@ (80012cc <HAL_GPIO_Init+0x2a8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d052      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 8001078:	4a94      	ldr	r2, [pc, #592]	@ (80012cc <HAL_GPIO_Init+0x2a8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d869      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 800107e:	4a94      	ldr	r2, [pc, #592]	@ (80012d0 <HAL_GPIO_Init+0x2ac>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d04c      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 8001084:	4a92      	ldr	r2, [pc, #584]	@ (80012d0 <HAL_GPIO_Init+0x2ac>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d863      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 800108a:	4a92      	ldr	r2, [pc, #584]	@ (80012d4 <HAL_GPIO_Init+0x2b0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d046      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 8001090:	4a90      	ldr	r2, [pc, #576]	@ (80012d4 <HAL_GPIO_Init+0x2b0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d85d      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 8001096:	2b12      	cmp	r3, #18
 8001098:	d82a      	bhi.n	80010f0 <HAL_GPIO_Init+0xcc>
 800109a:	2b12      	cmp	r3, #18
 800109c:	d859      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 800109e:	a201      	add	r2, pc, #4	@ (adr r2, 80010a4 <HAL_GPIO_Init+0x80>)
 80010a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a4:	0800111f 	.word	0x0800111f
 80010a8:	080010f9 	.word	0x080010f9
 80010ac:	0800110b 	.word	0x0800110b
 80010b0:	0800114d 	.word	0x0800114d
 80010b4:	08001153 	.word	0x08001153
 80010b8:	08001153 	.word	0x08001153
 80010bc:	08001153 	.word	0x08001153
 80010c0:	08001153 	.word	0x08001153
 80010c4:	08001153 	.word	0x08001153
 80010c8:	08001153 	.word	0x08001153
 80010cc:	08001153 	.word	0x08001153
 80010d0:	08001153 	.word	0x08001153
 80010d4:	08001153 	.word	0x08001153
 80010d8:	08001153 	.word	0x08001153
 80010dc:	08001153 	.word	0x08001153
 80010e0:	08001153 	.word	0x08001153
 80010e4:	08001153 	.word	0x08001153
 80010e8:	08001101 	.word	0x08001101
 80010ec:	08001115 	.word	0x08001115
 80010f0:	4a79      	ldr	r2, [pc, #484]	@ (80012d8 <HAL_GPIO_Init+0x2b4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010f6:	e02c      	b.n	8001152 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	623b      	str	r3, [r7, #32]
          break;
 80010fe:	e029      	b.n	8001154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	3304      	adds	r3, #4
 8001106:	623b      	str	r3, [r7, #32]
          break;
 8001108:	e024      	b.n	8001154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	3308      	adds	r3, #8
 8001110:	623b      	str	r3, [r7, #32]
          break;
 8001112:	e01f      	b.n	8001154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	330c      	adds	r3, #12
 800111a:	623b      	str	r3, [r7, #32]
          break;
 800111c:	e01a      	b.n	8001154 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001126:	2304      	movs	r3, #4
 8001128:	623b      	str	r3, [r7, #32]
          break;
 800112a:	e013      	b.n	8001154 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d105      	bne.n	8001140 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001134:	2308      	movs	r3, #8
 8001136:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	611a      	str	r2, [r3, #16]
          break;
 800113e:	e009      	b.n	8001154 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001140:	2308      	movs	r3, #8
 8001142:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	615a      	str	r2, [r3, #20]
          break;
 800114a:	e003      	b.n	8001154 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
          break;
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x130>
          break;
 8001152:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2bff      	cmp	r3, #255	@ 0xff
 8001158:	d801      	bhi.n	800115e <HAL_GPIO_Init+0x13a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	e001      	b.n	8001162 <HAL_GPIO_Init+0x13e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3304      	adds	r3, #4
 8001162:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2bff      	cmp	r3, #255	@ 0xff
 8001168:	d802      	bhi.n	8001170 <HAL_GPIO_Init+0x14c>
 800116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	e002      	b.n	8001176 <HAL_GPIO_Init+0x152>
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	3b08      	subs	r3, #8
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	210f      	movs	r1, #15
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	401a      	ands	r2, r3
 8001188:	6a39      	ldr	r1, [r7, #32]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	431a      	orrs	r2, r3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 80b1 	beq.w	8001306 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011a4:	4b4d      	ldr	r3, [pc, #308]	@ (80012dc <HAL_GPIO_Init+0x2b8>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a4c      	ldr	r2, [pc, #304]	@ (80012dc <HAL_GPIO_Init+0x2b8>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b4a      	ldr	r3, [pc, #296]	@ (80012dc <HAL_GPIO_Init+0x2b8>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011bc:	4a48      	ldr	r2, [pc, #288]	@ (80012e0 <HAL_GPIO_Init+0x2bc>)
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a40      	ldr	r2, [pc, #256]	@ (80012e4 <HAL_GPIO_Init+0x2c0>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d013      	beq.n	8001210 <HAL_GPIO_Init+0x1ec>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a3f      	ldr	r2, [pc, #252]	@ (80012e8 <HAL_GPIO_Init+0x2c4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d00d      	beq.n	800120c <HAL_GPIO_Init+0x1e8>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a3e      	ldr	r2, [pc, #248]	@ (80012ec <HAL_GPIO_Init+0x2c8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d007      	beq.n	8001208 <HAL_GPIO_Init+0x1e4>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a3d      	ldr	r2, [pc, #244]	@ (80012f0 <HAL_GPIO_Init+0x2cc>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d101      	bne.n	8001204 <HAL_GPIO_Init+0x1e0>
 8001200:	2303      	movs	r3, #3
 8001202:	e006      	b.n	8001212 <HAL_GPIO_Init+0x1ee>
 8001204:	2304      	movs	r3, #4
 8001206:	e004      	b.n	8001212 <HAL_GPIO_Init+0x1ee>
 8001208:	2302      	movs	r3, #2
 800120a:	e002      	b.n	8001212 <HAL_GPIO_Init+0x1ee>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <HAL_GPIO_Init+0x1ee>
 8001210:	2300      	movs	r3, #0
 8001212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001214:	f002 0203 	and.w	r2, r2, #3
 8001218:	0092      	lsls	r2, r2, #2
 800121a:	4093      	lsls	r3, r2
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001222:	492f      	ldr	r1, [pc, #188]	@ (80012e0 <HAL_GPIO_Init+0x2bc>)
 8001224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	492c      	ldr	r1, [pc, #176]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	608b      	str	r3, [r1, #8]
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800124a:	4b2a      	ldr	r3, [pc, #168]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	43db      	mvns	r3, r3
 8001252:	4928      	ldr	r1, [pc, #160]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001254:	4013      	ands	r3, r2
 8001256:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001264:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	4922      	ldr	r1, [pc, #136]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	60cb      	str	r3, [r1, #12]
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	43db      	mvns	r3, r3
 800127a:	491e      	ldr	r1, [pc, #120]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 800127c:	4013      	ands	r3, r2
 800127e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4918      	ldr	r1, [pc, #96]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800129a:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4914      	ldr	r1, [pc, #80]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d021      	beq.n	80012f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	490e      	ldr	r1, [pc, #56]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
 80012c0:	e021      	b.n	8001306 <HAL_GPIO_Init+0x2e2>
 80012c2:	bf00      	nop
 80012c4:	10320000 	.word	0x10320000
 80012c8:	10310000 	.word	0x10310000
 80012cc:	10220000 	.word	0x10220000
 80012d0:	10210000 	.word	0x10210000
 80012d4:	10120000 	.word	0x10120000
 80012d8:	10110000 	.word	0x10110000
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	40010800 	.word	0x40010800
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	40011000 	.word	0x40011000
 80012f0:	40011400 	.word	0x40011400
 80012f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <HAL_GPIO_Init+0x304>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	43db      	mvns	r3, r3
 8001300:	4909      	ldr	r1, [pc, #36]	@ (8001328 <HAL_GPIO_Init+0x304>)
 8001302:	4013      	ands	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	3301      	adds	r3, #1
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001312:	fa22 f303 	lsr.w	r3, r2, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	f47f ae8e 	bne.w	8001038 <HAL_GPIO_Init+0x14>
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	372c      	adds	r7, #44	@ 0x2c
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	40010400 	.word	0x40010400

0800132c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	887b      	ldrh	r3, [r7, #2]
 800133e:	4013      	ands	r3, r2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001344:	2301      	movs	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	e001      	b.n	800134e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	460b      	mov	r3, r1
 8001364:	807b      	strh	r3, [r7, #2]
 8001366:	4613      	mov	r3, r2
 8001368:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800136a:	787b      	ldrb	r3, [r7, #1]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001370:	887a      	ldrh	r2, [r7, #2]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001376:	e003      	b.n	8001380 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	041a      	lsls	r2, r3, #16
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	611a      	str	r2, [r3, #16]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800138a:	b480      	push	{r7}
 800138c:	b085      	sub	sp, #20
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	460b      	mov	r3, r1
 8001394:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800139c:	887a      	ldrh	r2, [r7, #2]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4013      	ands	r3, r2
 80013a2:	041a      	lsls	r2, r3, #16
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	887b      	ldrh	r3, [r7, #2]
 80013aa:	400b      	ands	r3, r1
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	611a      	str	r2, [r3, #16]
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e272      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8087 	beq.w	80014ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013dc:	4b92      	ldr	r3, [pc, #584]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d00c      	beq.n	8001402 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 030c 	and.w	r3, r3, #12
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d112      	bne.n	800141a <HAL_RCC_OscConfig+0x5e>
 80013f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001400:	d10b      	bne.n	800141a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001402:	4b89      	ldr	r3, [pc, #548]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d06c      	beq.n	80014e8 <HAL_RCC_OscConfig+0x12c>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d168      	bne.n	80014e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e24c      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001422:	d106      	bne.n	8001432 <HAL_RCC_OscConfig+0x76>
 8001424:	4b80      	ldr	r3, [pc, #512]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a7f      	ldr	r2, [pc, #508]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 800142a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	e02e      	b.n	8001490 <HAL_RCC_OscConfig+0xd4>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0x98>
 800143a:	4b7b      	ldr	r3, [pc, #492]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a7a      	ldr	r2, [pc, #488]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 8001440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b78      	ldr	r3, [pc, #480]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a77      	ldr	r2, [pc, #476]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 800144c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e01d      	b.n	8001490 <HAL_RCC_OscConfig+0xd4>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0xbc>
 800145e:	4b72      	ldr	r3, [pc, #456]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a71      	ldr	r2, [pc, #452]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 8001464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b6f      	ldr	r3, [pc, #444]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a6e      	ldr	r2, [pc, #440]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e00b      	b.n	8001490 <HAL_RCC_OscConfig+0xd4>
 8001478:	4b6b      	ldr	r3, [pc, #428]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a6a      	ldr	r2, [pc, #424]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 800147e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b68      	ldr	r3, [pc, #416]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a67      	ldr	r2, [pc, #412]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800148e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d013      	beq.n	80014c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fa64 	bl	8000964 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fa60 	bl	8000964 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	@ 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e200      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0xe4>
 80014be:	e014      	b.n	80014ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fa50 	bl	8000964 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fa4c 	bl	8000964 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	@ 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e1ec      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	4b53      	ldr	r3, [pc, #332]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x10c>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d063      	beq.n	80015be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001502:	4b49      	ldr	r3, [pc, #292]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b08      	cmp	r3, #8
 800150c:	d11c      	bne.n	8001548 <HAL_RCC_OscConfig+0x18c>
 800150e:	4b46      	ldr	r3, [pc, #280]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d116      	bne.n	8001548 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	4b43      	ldr	r3, [pc, #268]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <HAL_RCC_OscConfig+0x176>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d001      	beq.n	8001532 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e1c0      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001532:	4b3d      	ldr	r3, [pc, #244]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4939      	ldr	r1, [pc, #228]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	e03a      	b.n	80015be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d020      	beq.n	8001592 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001550:	4b36      	ldr	r3, [pc, #216]	@ (800162c <HAL_RCC_OscConfig+0x270>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001556:	f7ff fa05 	bl	8000964 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fa01 	bl	8000964 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1a1      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001570:	4b2d      	ldr	r3, [pc, #180]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b2a      	ldr	r3, [pc, #168]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4927      	ldr	r1, [pc, #156]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
 8001590:	e015      	b.n	80015be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001592:	4b26      	ldr	r3, [pc, #152]	@ (800162c <HAL_RCC_OscConfig+0x270>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff f9e4 	bl	8000964 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a0:	f7ff f9e0 	bl	8000964 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e180      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d03a      	beq.n	8001640 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d019      	beq.n	8001606 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d2:	4b17      	ldr	r3, [pc, #92]	@ (8001630 <HAL_RCC_OscConfig+0x274>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d8:	f7ff f9c4 	bl	8000964 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e0:	f7ff f9c0 	bl	8000964 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e160      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 face 	bl	8001ba0 <RCC_Delay>
 8001604:	e01c      	b.n	8001640 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001606:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <HAL_RCC_OscConfig+0x274>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160c:	f7ff f9aa 	bl	8000964 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001612:	e00f      	b.n	8001634 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff f9a6 	bl	8000964 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d908      	bls.n	8001634 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e146      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	42420000 	.word	0x42420000
 8001630:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001634:	4b92      	ldr	r3, [pc, #584]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1e9      	bne.n	8001614 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80a6 	beq.w	800179a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001652:	4b8b      	ldr	r3, [pc, #556]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10d      	bne.n	800167a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b88      	ldr	r3, [pc, #544]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a87      	ldr	r2, [pc, #540]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001668:	61d3      	str	r3, [r2, #28]
 800166a:	4b85      	ldr	r3, [pc, #532]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001676:	2301      	movs	r3, #1
 8001678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167a:	4b82      	ldr	r3, [pc, #520]	@ (8001884 <HAL_RCC_OscConfig+0x4c8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001682:	2b00      	cmp	r3, #0
 8001684:	d118      	bne.n	80016b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001686:	4b7f      	ldr	r3, [pc, #508]	@ (8001884 <HAL_RCC_OscConfig+0x4c8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a7e      	ldr	r2, [pc, #504]	@ (8001884 <HAL_RCC_OscConfig+0x4c8>)
 800168c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001692:	f7ff f967 	bl	8000964 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169a:	f7ff f963 	bl	8000964 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b64      	cmp	r3, #100	@ 0x64
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e103      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ac:	4b75      	ldr	r3, [pc, #468]	@ (8001884 <HAL_RCC_OscConfig+0x4c8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d106      	bne.n	80016ce <HAL_RCC_OscConfig+0x312>
 80016c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6213      	str	r3, [r2, #32]
 80016cc:	e02d      	b.n	800172a <HAL_RCC_OscConfig+0x36e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x334>
 80016d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a69      	ldr	r2, [pc, #420]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	6213      	str	r3, [r2, #32]
 80016e2:	4b67      	ldr	r3, [pc, #412]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a66      	ldr	r2, [pc, #408]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f023 0304 	bic.w	r3, r3, #4
 80016ec:	6213      	str	r3, [r2, #32]
 80016ee:	e01c      	b.n	800172a <HAL_RCC_OscConfig+0x36e>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d10c      	bne.n	8001712 <HAL_RCC_OscConfig+0x356>
 80016f8:	4b61      	ldr	r3, [pc, #388]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4a60      	ldr	r2, [pc, #384]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	4b5e      	ldr	r3, [pc, #376]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a5d      	ldr	r2, [pc, #372]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6213      	str	r3, [r2, #32]
 8001710:	e00b      	b.n	800172a <HAL_RCC_OscConfig+0x36e>
 8001712:	4b5b      	ldr	r3, [pc, #364]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4a5a      	ldr	r2, [pc, #360]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	6213      	str	r3, [r2, #32]
 800171e:	4b58      	ldr	r3, [pc, #352]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a57      	ldr	r2, [pc, #348]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d015      	beq.n	800175e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001732:	f7ff f917 	bl	8000964 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff f913 	bl	8000964 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e0b1      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001750:	4b4b      	ldr	r3, [pc, #300]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0ee      	beq.n	800173a <HAL_RCC_OscConfig+0x37e>
 800175c:	e014      	b.n	8001788 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175e:	f7ff f901 	bl	8000964 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001764:	e00a      	b.n	800177c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff f8fd 	bl	8000964 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e09b      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177c:	4b40      	ldr	r3, [pc, #256]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1ee      	bne.n	8001766 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d105      	bne.n	800179a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800178e:	4b3c      	ldr	r3, [pc, #240]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a3b      	ldr	r2, [pc, #236]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001798:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8087 	beq.w	80018b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a4:	4b36      	ldr	r3, [pc, #216]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d061      	beq.n	8001874 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d146      	bne.n	8001846 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b8:	4b33      	ldr	r3, [pc, #204]	@ (8001888 <HAL_RCC_OscConfig+0x4cc>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff f8d1 	bl	8000964 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff f8cd 	bl	8000964 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e06d      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d8:	4b29      	ldr	r3, [pc, #164]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f0      	bne.n	80017c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ec:	d108      	bne.n	8001800 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017ee:	4b24      	ldr	r3, [pc, #144]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	4921      	ldr	r1, [pc, #132]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001800:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a19      	ldr	r1, [r3, #32]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	430b      	orrs	r3, r1
 8001812:	491b      	ldr	r1, [pc, #108]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001818:	4b1b      	ldr	r3, [pc, #108]	@ (8001888 <HAL_RCC_OscConfig+0x4cc>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff f8a1 	bl	8000964 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001826:	f7ff f89d 	bl	8000964 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e03d      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x46a>
 8001844:	e035      	b.n	80018b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff f88a 	bl	8000964 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff f886 	bl	8000964 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e026      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x498>
 8001872:	e01e      	b.n	80018b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d107      	bne.n	800188c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e019      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
 8001880:	40021000 	.word	0x40021000
 8001884:	40007000 	.word	0x40007000
 8001888:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <HAL_RCC_OscConfig+0x500>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	429a      	cmp	r2, r3
 800189e:	d106      	bne.n	80018ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d001      	beq.n	80018b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0d0      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d910      	bls.n	8001904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b67      	ldr	r3, [pc, #412]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 0207 	bic.w	r2, r3, #7
 80018ea:	4965      	ldr	r1, [pc, #404]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b63      	ldr	r3, [pc, #396]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0b8      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d020      	beq.n	8001952 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800191c:	4b59      	ldr	r3, [pc, #356]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4a58      	ldr	r2, [pc, #352]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001926:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001934:	4b53      	ldr	r3, [pc, #332]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4a52      	ldr	r2, [pc, #328]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800193e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001940:	4b50      	ldr	r3, [pc, #320]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	494d      	ldr	r1, [pc, #308]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d040      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	4b47      	ldr	r3, [pc, #284]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d115      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e07f      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197e:	4b41      	ldr	r3, [pc, #260]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e073      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e06b      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4b39      	ldr	r3, [pc, #228]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f023 0203 	bic.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4936      	ldr	r1, [pc, #216]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b0:	f7fe ffd8 	bl	8000964 <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7fe ffd4 	bl	8000964 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e053      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 020c 	and.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e0:	4b27      	ldr	r3, [pc, #156]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d210      	bcs.n	8001a10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b24      	ldr	r3, [pc, #144]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 0207 	bic.w	r2, r3, #7
 80019f6:	4922      	ldr	r1, [pc, #136]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b20      	ldr	r3, [pc, #128]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e032      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a1c:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4916      	ldr	r1, [pc, #88]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a3a:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	490e      	ldr	r1, [pc, #56]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a4e:	f000 f821 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8001a52:	4602      	mov	r2, r0
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	490a      	ldr	r1, [pc, #40]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a60:	5ccb      	ldrb	r3, [r1, r3]
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	4a09      	ldr	r2, [pc, #36]	@ (8001a8c <HAL_RCC_ClockConfig+0x1cc>)
 8001a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <HAL_RCC_ClockConfig+0x1d0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe ff36 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40022000 	.word	0x40022000
 8001a84:	40021000 	.word	0x40021000
 8001a88:	08002288 	.word	0x08002288
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000004 	.word	0x20000004

08001a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aae:	4b1e      	ldr	r3, [pc, #120]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d002      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x30>
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d003      	beq.n	8001aca <HAL_RCC_GetSysClockFreq+0x36>
 8001ac2:	e027      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ac6:	613b      	str	r3, [r7, #16]
      break;
 8001ac8:	e027      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	0c9b      	lsrs	r3, r3, #18
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	4a17      	ldr	r2, [pc, #92]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ad4:	5cd3      	ldrb	r3, [r2, r3]
 8001ad6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d010      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	0c5b      	lsrs	r3, r3, #17
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	4a11      	ldr	r2, [pc, #68]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001aee:	5cd3      	ldrb	r3, [r2, r3]
 8001af0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001af6:	fb03 f202 	mul.w	r2, r3, r2
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e004      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a0c      	ldr	r2, [pc, #48]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	613b      	str	r3, [r7, #16]
      break;
 8001b12:	e002      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b16:	613b      	str	r3, [r7, #16]
      break;
 8001b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1a:	693b      	ldr	r3, [r7, #16]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	007a1200 	.word	0x007a1200
 8001b30:	080022a0 	.word	0x080022a0
 8001b34:	080022b0 	.word	0x080022b0
 8001b38:	003d0900 	.word	0x003d0900

08001b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b40:	4b02      	ldr	r3, [pc, #8]	@ (8001b4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	20000000 	.word	0x20000000

08001b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b54:	f7ff fff2 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4903      	ldr	r1, [pc, #12]	@ (8001b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	08002298 	.word	0x08002298

08001b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b7c:	f7ff ffde 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	0adb      	lsrs	r3, r3, #11
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4903      	ldr	r1, [pc, #12]	@ (8001b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	08002298 	.word	0x08002298

08001ba0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <RCC_Delay+0x34>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <RCC_Delay+0x38>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0a5b      	lsrs	r3, r3, #9
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bbc:	bf00      	nop
  }
  while (Delay --);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1e5a      	subs	r2, r3, #1
 8001bc2:	60fa      	str	r2, [r7, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f9      	bne.n	8001bbc <RCC_Delay+0x1c>
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	10624dd3 	.word	0x10624dd3

08001bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e042      	b.n	8001c74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7fe fd64 	bl	80006d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2224      	movs	r2, #36	@ 0x24
 8001c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fa09 	bl	8002038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	@ 0x28
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d175      	bne.n	8001d88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_UART_Transmit+0x2c>
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e06e      	b.n	8001d8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2221      	movs	r2, #33	@ 0x21
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cba:	f7fe fe53 	bl	8000964 <HAL_GetTick>
 8001cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	88fa      	ldrh	r2, [r7, #6]
 8001cc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	88fa      	ldrh	r2, [r7, #6]
 8001cca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cd4:	d108      	bne.n	8001ce8 <HAL_UART_Transmit+0x6c>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d104      	bne.n	8001ce8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	e003      	b.n	8001cf0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cf0:	e02e      	b.n	8001d50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2180      	movs	r1, #128	@ 0x80
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 f8df 	bl	8001ec0 <UART_WaitOnFlagUntilTimeout>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e03a      	b.n	8001d8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10b      	bne.n	8001d32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	e007      	b.n	8001d42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	781a      	ldrb	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1cb      	bne.n	8001cf2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2200      	movs	r2, #0
 8001d62:	2140      	movs	r1, #64	@ 0x40
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f8ab 	bl	8001ec0 <UART_WaitOnFlagUntilTimeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e006      	b.n	8001d8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e000      	b.n	8001d8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d88:	2302      	movs	r3, #2
  }
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3720      	adds	r7, #32
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b08a      	sub	sp, #40	@ 0x28
 8001d96:	af02      	add	r7, sp, #8
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b20      	cmp	r3, #32
 8001db0:	f040 8081 	bne.w	8001eb6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <HAL_UART_Receive+0x2e>
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e079      	b.n	8001eb8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2222      	movs	r2, #34	@ 0x22
 8001dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dd8:	f7fe fdc4 	bl	8000964 <HAL_GetTick>
 8001ddc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	88fa      	ldrh	r2, [r7, #6]
 8001de2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	88fa      	ldrh	r2, [r7, #6]
 8001de8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001df2:	d108      	bne.n	8001e06 <HAL_UART_Receive+0x74>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d104      	bne.n	8001e06 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	e003      	b.n	8001e0e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001e0e:	e047      	b.n	8001ea0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2200      	movs	r2, #0
 8001e18:	2120      	movs	r1, #32
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f850 	bl	8001ec0 <UART_WaitOnFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e042      	b.n	8001eb8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10c      	bne.n	8001e52 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	e01f      	b.n	8001e92 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e5a:	d007      	beq.n	8001e6c <HAL_UART_Receive+0xda>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10a      	bne.n	8001e7a <HAL_UART_Receive+0xe8>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d106      	bne.n	8001e7a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	e008      	b.n	8001e8c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1b2      	bne.n	8001e10 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001eb6:	2302      	movs	r3, #2
  }
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3720      	adds	r7, #32
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ed0:	e03b      	b.n	8001f4a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d037      	beq.n	8001f4a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eda:	f7fe fd43 	bl	8000964 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	6a3a      	ldr	r2, [r7, #32]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d302      	bcc.n	8001ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e03a      	b.n	8001f6a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d023      	beq.n	8001f4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b80      	cmp	r3, #128	@ 0x80
 8001f06:	d020      	beq.n	8001f4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b40      	cmp	r3, #64	@ 0x40
 8001f0c:	d01d      	beq.n	8001f4a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d116      	bne.n	8001f4a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f81d 	bl	8001f72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00f      	b.n	8001f6a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4013      	ands	r3, r2
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	bf0c      	ite	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	2300      	movne	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d0b4      	beq.n	8001ed2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b095      	sub	sp, #84	@ 0x54
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	330c      	adds	r3, #12
 8001f80:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f84:	e853 3f00 	ldrex	r3, [r3]
 8001f88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	330c      	adds	r3, #12
 8001f98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8001f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001fa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001fa2:	e841 2300 	strex	r3, r2, [r1]
 8001fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1e5      	bne.n	8001f7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3314      	adds	r3, #20
 8001fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	e853 3f00 	ldrex	r3, [r3]
 8001fbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3314      	adds	r3, #20
 8001fcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fd6:	e841 2300 	strex	r3, r2, [r1]
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1e5      	bne.n	8001fae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d119      	bne.n	800201e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	330c      	adds	r3, #12
 8001ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	e853 3f00 	ldrex	r3, [r3]
 8001ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f023 0310 	bic.w	r3, r3, #16
 8002000:	647b      	str	r3, [r7, #68]	@ 0x44
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	330c      	adds	r3, #12
 8002008:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800200a:	61ba      	str	r2, [r7, #24]
 800200c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800200e:	6979      	ldr	r1, [r7, #20]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	e841 2300 	strex	r3, r2, [r1]
 8002016:	613b      	str	r3, [r7, #16]
   return(result);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1e5      	bne.n	8001fea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2220      	movs	r2, #32
 8002022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800202c:	bf00      	nop
 800202e:	3754      	adds	r7, #84	@ 0x54
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
	...

08002038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002072:	f023 030c 	bic.w	r3, r3, #12
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	430b      	orrs	r3, r1
 800207e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a2c      	ldr	r2, [pc, #176]	@ (800214c <UART_SetConfig+0x114>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d103      	bne.n	80020a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020a0:	f7ff fd6a 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	e002      	b.n	80020ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020a8:	f7ff fd52 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 80020ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	009a      	lsls	r2, r3, #2
 80020b8:	441a      	add	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	4a22      	ldr	r2, [pc, #136]	@ (8002150 <UART_SetConfig+0x118>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	0119      	lsls	r1, r3, #4
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	009a      	lsls	r2, r3, #2
 80020d8:	441a      	add	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002150 <UART_SetConfig+0x118>)
 80020e6:	fba3 0302 	umull	r0, r3, r3, r2
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2064      	movs	r0, #100	@ 0x64
 80020ee:	fb00 f303 	mul.w	r3, r0, r3
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	3332      	adds	r3, #50	@ 0x32
 80020f8:	4a15      	ldr	r2, [pc, #84]	@ (8002150 <UART_SetConfig+0x118>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002104:	4419      	add	r1, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	009a      	lsls	r2, r3, #2
 8002110:	441a      	add	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	fbb2 f2f3 	udiv	r2, r2, r3
 800211c:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <UART_SetConfig+0x118>)
 800211e:	fba3 0302 	umull	r0, r3, r3, r2
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2064      	movs	r0, #100	@ 0x64
 8002126:	fb00 f303 	mul.w	r3, r0, r3
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	3332      	adds	r3, #50	@ 0x32
 8002130:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <UART_SetConfig+0x118>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	f003 020f 	and.w	r2, r3, #15
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	440a      	add	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40013800 	.word	0x40013800
 8002150:	51eb851f 	.word	0x51eb851f

08002154 <memset>:
 8002154:	4603      	mov	r3, r0
 8002156:	4402      	add	r2, r0
 8002158:	4293      	cmp	r3, r2
 800215a:	d100      	bne.n	800215e <memset+0xa>
 800215c:	4770      	bx	lr
 800215e:	f803 1b01 	strb.w	r1, [r3], #1
 8002162:	e7f9      	b.n	8002158 <memset+0x4>

08002164 <__libc_init_array>:
 8002164:	b570      	push	{r4, r5, r6, lr}
 8002166:	2600      	movs	r6, #0
 8002168:	4d0c      	ldr	r5, [pc, #48]	@ (800219c <__libc_init_array+0x38>)
 800216a:	4c0d      	ldr	r4, [pc, #52]	@ (80021a0 <__libc_init_array+0x3c>)
 800216c:	1b64      	subs	r4, r4, r5
 800216e:	10a4      	asrs	r4, r4, #2
 8002170:	42a6      	cmp	r6, r4
 8002172:	d109      	bne.n	8002188 <__libc_init_array+0x24>
 8002174:	f000 f828 	bl	80021c8 <_init>
 8002178:	2600      	movs	r6, #0
 800217a:	4d0a      	ldr	r5, [pc, #40]	@ (80021a4 <__libc_init_array+0x40>)
 800217c:	4c0a      	ldr	r4, [pc, #40]	@ (80021a8 <__libc_init_array+0x44>)
 800217e:	1b64      	subs	r4, r4, r5
 8002180:	10a4      	asrs	r4, r4, #2
 8002182:	42a6      	cmp	r6, r4
 8002184:	d105      	bne.n	8002192 <__libc_init_array+0x2e>
 8002186:	bd70      	pop	{r4, r5, r6, pc}
 8002188:	f855 3b04 	ldr.w	r3, [r5], #4
 800218c:	4798      	blx	r3
 800218e:	3601      	adds	r6, #1
 8002190:	e7ee      	b.n	8002170 <__libc_init_array+0xc>
 8002192:	f855 3b04 	ldr.w	r3, [r5], #4
 8002196:	4798      	blx	r3
 8002198:	3601      	adds	r6, #1
 800219a:	e7f2      	b.n	8002182 <__libc_init_array+0x1e>
 800219c:	080022bc 	.word	0x080022bc
 80021a0:	080022bc 	.word	0x080022bc
 80021a4:	080022bc 	.word	0x080022bc
 80021a8:	080022c0 	.word	0x080022c0

080021ac <memcpy>:
 80021ac:	440a      	add	r2, r1
 80021ae:	4291      	cmp	r1, r2
 80021b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80021b4:	d100      	bne.n	80021b8 <memcpy+0xc>
 80021b6:	4770      	bx	lr
 80021b8:	b510      	push	{r4, lr}
 80021ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021be:	4291      	cmp	r1, r2
 80021c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021c4:	d1f9      	bne.n	80021ba <memcpy+0xe>
 80021c6:	bd10      	pop	{r4, pc}

080021c8 <_init>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	bf00      	nop
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr

080021d4 <_fini>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	bf00      	nop
 80021d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021da:	bc08      	pop	{r3}
 80021dc:	469e      	mov	lr, r3
 80021de:	4770      	bx	lr
